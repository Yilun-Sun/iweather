{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Search","Input","App","getCityLocationByName","cityName","setState","axios","get","params","key","location","lang","then","response","console","log","data","getWeatherDataByLocation","lon","lat","catch","error","montrealWeather","now","onSearch","value","state","this","className","placeholder","style","width","temp","feelsLike","text","pressure","vis","obsTime","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mNAOQA,G,aAAWC,EAAXD,QAEaE,E,kDACnB,aAAe,IAAD,8BACZ,gBAWFC,sBAAwB,SAACC,GACvB,EAAKC,SAAS,CAAED,SAAUA,IAI1BE,IACGC,IAJmB,8CAIA,CAClBC,OAAQ,CACNC,IAAK,mCACLC,SAAUN,EACVO,KAAM,QAGTC,MAAK,SAACC,GAELC,QAAQC,IAAIF,EAASG,KAAKN,SAAS,IACnC,EAAKO,yBACHJ,EAASG,KAAKN,SAAS,GAAGQ,IAAM,IAAML,EAASG,KAAKN,SAAS,GAAGS,QAGnEC,OAAM,SAAUC,GACfP,QAAQC,IAAIM,OAjCJ,EAqCdJ,yBAA2B,SAACP,GAI1BJ,IACGC,IAJgB,8CAIA,CACfC,OAAQ,CACNC,IAAK,mCACLC,SAAUA,EACVC,KAAM,QAGTC,MAAK,SAACC,GACL,EAAKR,SAAS,CAAEiB,gBAAiBT,EAASG,KAAKO,MAC/CT,QAAQC,IAAIF,EAASG,KAAKO,QAE3BH,OAAM,SAAUC,GACfP,QAAQC,IAAIM,OAtDJ,EA0DdG,SAAW,SAACC,GACV,EAAKtB,sBAAsBsB,IAzD3B,EAAKC,MAAQ,CACXJ,gBAAiB,GACjBlB,SAAU,IAJA,E,gEASZuB,KAAKxB,sBAAsB,c,+BAsD3B,OACE,yBAAKyB,UAAU,OACb,2CACA,kBAAC5B,EAAD,CACE6B,YAAY,kBACZL,SAAUG,KAAKH,SACfM,MAAO,CAAEC,MAAO,OAElB,sCAAYJ,KAAKD,MAAMtB,UACvB,6CAAmBuB,KAAKD,MAAMJ,gBAAgBU,KAA9C,UACA,4CAAkBL,KAAKD,MAAMJ,gBAAgBW,UAA7C,UACA,yCAAeN,KAAKD,MAAMJ,gBAAgBY,MAC1C,0CAAgBP,KAAKD,MAAMJ,gBAAgBa,UAC3C,4CAAkBR,KAAKD,MAAMJ,gBAAgBc,KAC7C,8CAAoBT,KAAKD,MAAMJ,gBAAgBe,c,GA9EtBC,aCGbC,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAGP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACLP,QAAQO,MAAMA,EAAM+B,a","file":"static/js/main.da9a8a31.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport axios from \"axios\";\n\nimport \"antd/dist/antd.css\";\nimport { Input } from \"antd\";\nconst { Search } = Input;\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      montrealWeather: {},\n      cityName: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.getCityLocationByName(\"montreal\");\n  }\n\n  getCityLocationByName = (cityName) => {\n    this.setState({ cityName: cityName });\n    const cityLookupUrl = \"https://geoapi.qweather.com/v2/city/lookup?\";\n\n    // get location\n    axios\n      .get(cityLookupUrl, {\n        params: {\n          key: \"935d116f4c384dec9ac8e88bdba1319d\",\n          location: cityName,\n          lang: \"en\",\n        },\n      })\n      .then((response) => {\n        // this.setState({ montrealWeather: response.data.now });\n        console.log(response.data.location[0]);\n        this.getWeatherDataByLocation(\n          response.data.location[0].lon + \",\" + response.data.location[0].lat\n        );\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  getWeatherDataByLocation = (location) => {\n    const weatherUrl = \"https://devapi.qweather.com/v7/weather/now?\";\n\n    // get weather by location\n    axios\n      .get(weatherUrl, {\n        params: {\n          key: \"935d116f4c384dec9ac8e88bdba1319d\",\n          location: location,\n          lang: \"en\",\n        },\n      })\n      .then((response) => {\n        this.setState({ montrealWeather: response.data.now });\n        console.log(response.data.now);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  onSearch = (value) => {\n    this.getCityLocationByName(value);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Météo</h1>\n        <Search\n          placeholder=\"input city name\"\n          onSearch={this.onSearch}\n          style={{ width: 200 }}\n        />\n        <div>City: {this.state.cityName}</div>\n        <div>Temperature: {this.state.montrealWeather.temp}℃</div>\n        <div>Feels like: {this.state.montrealWeather.feelsLike}℃</div>\n        <div>Outside: {this.state.montrealWeather.text}</div>\n        <div>Pressure: {this.state.montrealWeather.pressure}</div>\n        <div>Visibility: {this.state.montrealWeather.vis}</div>\n        <div>Observe time: {this.state.montrealWeather.obsTime}</div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // React.StrictMode commented due to an error occurs in ant design v4.0\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}